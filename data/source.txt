
Developing Data Models with SAP HANA Cloud

...

Unit 1
Preparing the Modeling Environment
After completing this unit, you will be able to:

Describe SAP Business Application Studio and how it is used for development in SAP HANA Cloud.
Create a Development Space for your modeling content in SAP Business Application Studio.
Create a modeling project in SAP Business Application Studio.
Import a Project into your Workspace of SAP Business Application Studio.
Describe the layout and features of SAP Business Application Studio that are relevant to modeling.
Getting Started with SAP Business Application Studio
Working with Development Spaces
Creating a New Project in SAP Business Application Studio
Importing an Existing Project in SAP Business Application Studio
Navigating SAP Business Application Studio

...

Getting Started with SAP Business Application Studio
Objective

After completing this lesson, you will be able to describe SAP Business Application Studio and how it is used for development in SAP HANA Cloud.
SAP Business Application Studio
Before we get started developing data models in SAP HANA Cloud, we should introduce the key tool we will use, SAP Business Application Studio.

SAP Business Application Studio is a very powerful, web-based Integrated Development Environment (IDE) that is used to develop all components of a modern, full-stack application including the interface, the application and the database layer.

SAP Business Application Studio supports development of cloud, on-premise and hybrid applications that integrate SAP and non-SAP technologies.

SAP Business Application Studio is probably the only development tool that you will ever need as it includes a huge number of features to support many development scenarios. One of those scenarios is data modeling in SAP HANA Cloud. This is the scenario we focus on in this learning journey.

A screenshot of SAP Business Application Studio, showing the Action bar, the Explorer Pane, and the Welcome tab with the some of the key startup actions.
SAP Business Application Studio is based on Visual Studio Code, which is an open-source software project started by Microsoft. It is widely adopted by the development community and is popular choice for developers because it allows them to plug-in their favorite extensions that provide additional tooling for their development projects. SAP and third parties provide many plug-ins for different types of SAP development projects to increase developer productivity.

SAP Business Application Studio provides text and graphical editors to create development artifacts, plus a command line interface (CLI).

A key feature of SAP Business Application Studio is the native Git support for source file version management. Git controls are embedded into the Business Application Studio.

Note

Web IDE for SAP HANA can also be used for modeling in SAP HANA Cloud, but is not recommended as it misses many additional productivity aids and features that supports the modeler. Web IDE will not be developed further and Business Application Studio will be the tool that receives all new features. SAP Business Application Studio is the recommended tool for data modeling in SAP HANA Cloud.

Getting Access to SAP Business Application Studio
SAP Business Application Studio is provided as a web-based application, with the back-end running on SAP Business Technology Platform (BTP). You subscribe to SAP Business Application Studio service at the BTP sub-account level. You do this in the BTP Cockpit.

Before you can launch SAP Business Application Studio from your browser, the following steps are required. Some relate to the BTP account or sub-account, others are specific to the user that will use SAP Business Application Studio.

A table showing the required steps in SAP BTP before you can work in SAP Business Application Studio. The steps are separated beetween BTP Account and Subaccount step, and User Membership and authorization setup.
When these steps are complete, you are ready to launch SAP Business Application Studio.

Watch this video to learn about steps to launch SAP Business Application Studio.

...

Working with Development Spaces
Objective

After completing this lesson, you will be able to create a Development Space for your modeling content in SAP Business Application Studio.
Development Spaces in SAP Business Application Studio
In SAP Business Application Studio, each developer has their own environment. This environment is made up of one or more Development Spaces.

Be careful not to confuse development spaces with Cloud Foundry spaces.
When you create a development space, you will be asked to choose tools, known as extensions, that you require. For modeling in SAP HANA Cloud, it is essential that you include the SAP HANA Calculation View Editor extension in your development space. This is a key tool that you will use.

Watch the video, Configuring a Development Space, following this figure to learn about configuring a Development Space and choosing extensions.

Managing Development Spaces
The landing page of SAP Business Application Studio contains the list of Development Spaces. You may have access to more than one. This list Includes the following:

The name of the Development Space
The kind of application
The status: STOPPED, STARTING, RUNNING, and so forth
Creation date
ID
A Development Space must be running before you can work in it. You start it up from the landing page. When it is running, the name of the Development Space "becomes" a hyperlink that you use to enter your Development Space.

Caution

Any Development Space automatically stops, after some idle time, to preserve resources. Therefore, be sure to always check the status of a development space in the landing page before connecting to that space. This is especially true if you bookmark the URL of a development space, which includes the space ID.
Creating Several Development Spaces
A diagram showing three different development spaces of different kinds created by a user. Two of them are running, the other one is stopped.
Depending on the SAP BTP subscription, there might be some limitations to the maximum number of spaces that you can create, and the maximum number of spaces that can be running in parallel.

Note

In an SAP BTP Trial account, you can define up to two Development Spaces and only one of these can be running at one time. If you need to swap development spaces, you must first stop the one you are using.
Maintenance of Development Spaces
When a Development Space is created, its name and kind of application cannot be changed. However, you can add optional extensions to the development space. Before you can do that, the Development Space must be stopped.

Caution

To preserve the existing projects of your development space, it is not possible to remove an extension that is already assigned to it.
It is also possible to export the entire content of a Development Space as a compressed .tar.gz archive. Before you can do that, the Development Space must be running.

At the end of the Development Space export, you are given detailed information on how to import the Development Space content into another one. Generally, the target Development Space should be an empty one.

Create a Development Space
Learn how to create a development space.

Demo

...

Creating a New Project in SAP Business Application Studio
Objective

After completing this lesson, you will be able to create a modeling project in SAP Business Application Studio.
Projects in SAP Business Application Studio
The File Structure in the Repository of SAP Business Application Studio
In SAP Business Application Studio, projects are created in a folder structure that is specific to your user and your development space.

Watch this video to learn about file structure in the repository of SAP Business Application Studio.

When a project is opened in the Explorer view, you can navigate its content (sub-folders and files), open files with the editor, delete or move files, and so on.

This slide show the file structure of a project in SAP Business Application Studio.
The ribbon at the top of the Explorer view shows the name of the folder (capitalized). It is opened as a workspace, meaning that specific Business Application Studio settings can be associated to the folder.

Creating a Project from a Template
If you are starting from scratch and not working on an existing project, you use the Start from Template button on the Welcome tab. This wizard creates an near-empty project with only the base files provided to get you started.

Create a New Project from a Template
Demo

...

Importing an Existing Project in SAP Business Application Studio
Objective

After completing this lesson, you will be able to import a Project into your Workspace of SAP Business Application Studio.
Import a Project
Sharing Development Content using Git
Git is the preferred method for sharing development content in an SAP HANA Cloud project. Sharing means importing and exporting content with other developers.

Git is used to manage the source code in an application development environment. It provides tools for developers who need to collaborate on projects and work in parallel. Git provides sophisticated features to manage the source code, especially in large projects where multiple team members need to work together and share objects without overwriting each others' work.

SAP Business Application Studio includes Git allowing you to manage the lifecycle of your source code locally, but also to connect to a remote corporate/public Git repository to interact with other developers, share code, and so on.

Git operations can also be invoked from the terminal, which is suitable for experienced Git users, or from the Git view that gives you access to the base Git functionality in a more guided and visual approach.

Note

A dedicated lesson covers using Git in SAP Business Application Studio later in this course.
Importing Development Content without Git
Although Git is recommended, you could also use the simpler import features of SAP SAP Business Application Studio to bring content into your workspace. You can copy a complete project or just parts of a project to your existing workspace or start a new workspace. Be careful when you are using these tools as there is no tracking and version controls as you have with Git.

Import
Import Options	Description
Import (Welcome page)
Import project (right-click on blank area)

Imports exclusively .tar or .zip archives and also extracts them at the same time.
After importing a project, the new folder can be opened in a new workspace.

File → Upload Files	Uploads archives (.tar or .zip) or single files
This is useful when you need to add individual files into your project structure instead of an entire project. If you upload an archive file, you must then extract its contents with the command line (tar / unzip).

Drag and drop from your file explorer	With drag and drop, you can copy files, folders, or both, from your Windows File Explorer to any folder visible in the Explorer view of Business Application Studio.
Caution

When you are using File → Upload Files and drag and drop from your Windows File Explorer, the uploaded content might overwrite existing content (same file name and same target folder). A warning is shown for each conflicting file.
Exporting Development Content without Git
You can easily export development content using the simple download option of SAP Business Application Studio.

Export Options	Description
Download	Downloads files and/or folders from SAP Business Application Studio perhaps to pass to other colleagues. Multiple objects are archived as a single .tar file. Simply right-click on any file or folder in the Explorer view of Business Application Studio.
To download the entire root folder (perhaps to include multiple projects), right-click the blank area below the file structure.

Import a project
In this demonstration, you will learn how to import a project into SAP Business Application Studio from a .zip or .tar archive.

Demo


...

Navigating SAP Business Application Studio
Objective

After completing this lesson, you will be able to describe the layout and features of SAP Business Application Studio that are relevant to modeling.
Interface of SAP Business Application Studio
Watch this video to learn about SAP Business Application Studio Interface.

SAP Business Application Studio offers a lot of different ways to perform the same action: menu commands, keyboard shortcuts, quick commands, and so on. The different views on the left are there to cover your need as a developer. Explore the file structure to create/modify/move/delete files, search/replace within file content, connect your workspace to Git, Debug, and so on.

The list of available views depend on the extensions that are included by default (depending on the kind of application your development space was created for) or added as options.

Some of the views are added automatically as icons to the very left of the screen, others are not. However, you can open any existing view by choosing Choose → Open View.

Some views have their own left pane, while others appear as a sub-pane of another one. For example, the SAP HANA Projects and Java Projects views are presented in the same Explorer view.

To get a neat workplace, you can easily hide the icons of the views that you do not need. You can also hide any additional extension-related pane.

SAP Business Application Studio Editors
Watch this video to learn about the text editor and running commands.

This slide show how to use the Running Quick Command function.
The Quick Command feature is a powerful way to execute repetitive or one-time actions. The available commands come under different categories, such as Cloud Foundry, CDS, graphical modeling, and so on. Exactly like the views, the quick commands depend on the extensions installed in your development space.

This slide show the available status bar features.
The status bar of SAP Business Application Studio provides several types of information. Among these are notifications and information on problems (warnings or errors) in your code.

Another important piece of information if you work in Cloud Foundry is the Cloud Foundry status and, if applicable, the Cloud Foundry target. It also provides Git-related information, when a project is Git-enabled, such as the name of the checked-out branch.

Work with Basic Features of SAP Business Application Studio
In this demonstration, you will learn how to use the basic features of SAP Business Application Studio.

Demo

...

Knowledge quiz
It's time to put what you've learned to the test, get 4 right to pass this unit.

1.
When you need to collaborate with others on large projects, which is the best option for bringing development content into your workspace?
Choose the correct answer.

Upload from File

Import

Clone from Git
2.
Which option do you use if you want to create a brand new project?
Choose the correct answer.

Clone from Git

Import

Start from Template
3.
Which extension is essential to include in your development space in order to begin modeling?
Choose the correct answer.

CDS Graphical Editor

SAP HANA Calculation View Editor

Flowgraph Editor
4.
In SAP HANA Cloud, which tool is recommended for data modeling?
Choose the correct answer.

Database Explorer

SAP Business Application Studio

Web IDE
5.
What can you do in the Explorer view of SAP Business Application Studio?
There are two correct answers.

Create a project from a template

List files and folders

Manage SAP HANA artifacts deployment.

......

Unit 2
Creating Calculation Views
After completing this unit, you will be able to:

Understand modeling terminology of SAP HANA Cloud so that you are ready to begin modeling.
Create a dimension calculation view using the graphical calculation view editor.
Create a cube calculation view using the graphical calculation view editor.
Create a time-based dimension calculation view using the graphical calculation view editor.
Understand which data sources are supported by calculation views.
Check the output of a calculation view to ensure correct results are generated.
Describe features that are common to all types of calculation view.
Describe the function of the top view node.
Understanding Basic Concepts and Terminology
Creating Dimension Calculation Views
Creating Cube Calculation Views
Creating Time-Based Dimension Calculation Views
Choosing a Data Source for a Calculation View
Checking the Output of a Calculation View
Working with Common Features of Calculation Views
Top View Node

...

Understanding Basic Concepts and Terminology
Objective

After completing this lesson, you will be able to understand modeling terminology of SAP HANA Cloud so that you are ready to begin modeling.
Key Concepts of Data Modeling
Before introducing calculation views in SAP HANA Cloud, you should become familiar with some key modeling concepts and the terms that are frequently used.

Measure and Attribute
A data model usually contains a selection of measures and attributes.

Measure Versus Attribute
 	Measure	Attribute
What is it?	A numeric value, such as a price or quantity, on which you can process arithmetic or statistics operations, such as sum, average, top N values, and calculations.	A descriptive element such as 'country' that is used the provide context for a measure. For example 'Sales Revenue by France'.
Examples	
Quantity

Sales Revenue

Product

Customer

Country

Year

Attributes are used to filter or aggregate the measures, in order to answer questions such as the following:

What are the total sales originating from Hamburg?

What is the sales revenue for Cars in 2022?

Dimension
A dimension is a group of related attributes. In the example below, we see a dimension called Product. This dimension includes various related attributes including product name, category, supplier.

Dimensions are re-useable objects. When they have been created, they can are shared by developers and used to develop star schemas.

A dimension contains key, name, and attributes. Use different dimensions for different entities, like Product or Sales Org. Product has attributes Product Category and Supplier. Sales Org has attributes Country and Region.
Star Schema
A star schema is a very powerful type of data model that we can create in SAP HANA Cloud. A star schema invokes a powerful OLAP engine to provide fast slice-and-dice across data.

Watch this video to learn about the Star Schema.

Note

A fact table can be one table but it is often defined from a combination of tables to produce a view of a transaction, such as a sales order. Dimensions are then connected to the fact table to provide additional, descriptive information about the transaction, such as, the country of the customer.
Hierarchy
A hierarchy is a structured representation of an organization, a list of products, the time dimension, and so on, using levels.

It is often used to provide the easy navigation of a large data set in a drill-down. You can define one or more hierarchies in calculation views that provide the end user with a convenient and natural way to navigate their data.

Watch this video to learn about the hierarchy concept.

Semantics
The term semantics is used to describe the meaning of an attribute or a measure, for example:

A monetary value

For example, the total amount sold would need to indicate the currency (for example USD, EUR, or GBP). An amount without a currency is meaningless.

A quantity, weight, volume, or distance

For example, quantity would need to specify the unit of measurement in which the data is expressed. Again, a quantity without a unit of measurement is meaningless.

In SAP HANA Cloud, we can add semantics to measures, attributes, or an entire calculation view. Semantic information is essential in the final report to provide the business user with important information about the data. This information is often not available in the original source tables but can easily be added by the developer in the calculation view.

Calculation Views in SAP HANA
A calculation view is the key modeling object of SAP HANA Cloud.

Calculation Views are built on top of physical tables in the database layer of SAP HANA platform. They are consumed in operational reporting and analytics applications.
The purpose of calculation views is to project data from the individual database tables, and to perform a variety of data calculations in order to generate a meaningful result set to answer a specific business question.

Benefits of Calculation Views

Design-Time Versus Runtime Calculation Views

Deploying Calculation Views
Relationship between design-time and run-time objects. Objects are designed in the HDB module in your project inside your workspace. When you deploy the object, a run-time object, such as a column view, is created in your HDI container.
When you deploy a design-time file with SAP Business Application Studio, SAP HANA Cloud generates the corresponding runtime object in a database container. A container is where all related runtime objects are stored in the database. An SAP HANA Cloud database can have many containers. We will cover containers later.

Analytical Versus Transactional Requirements
Physical tables are updated and read by transactional applications via the application server. Calculation views are read directly by analytical or (less often) transactional applications. For details, see the following text.
In transactional applications, such as SAP ERP, the underlying data (stored in physical tables) is generally handled by the application server. This layer is necessary to handle the business process logic. The application usually reads and writes directly to the database tables. Calculation views are not usually needed, however it is technically possible for the application to read a calculation view if this benefits the application. For example, it is possible to consume a calculation view from ABAP.

Calculation views are read only, and cannot change data in the SAP HANA Cloud database.

Analytical applications that do not usually need to write to the database so they can bypass the application server and directly query the calculation views, where data is calculated on-the-fly, in the SAP HANA Cloud in-memory database.

...

Creating Dimension Calculation Views
Objective

After completing this lesson, you will be able to create a dimension calculation view using the graphical calculation view editor.
Dimension Calculation Views
Purpose of a Dimension Calculation View
A dimension calculation view is used to expose master data from source tables. You can combine multiple data sources, define filters, calculate additional attributes, and create hierarchies to provide a meaningful view of master data. A dimension calculation view is a highly-reusable, centralized object that provides consistent data. You would typically define a dimension calculation view and share it with other colleagues who would consume it in their own calculation views.

An example of a dimension view for customer that accesses columns from different database tables. ID, Name, and Country are accessed from the Customer Table. Contact Frequency is accessed from the Contact Preference Table.
Dimension calculation views are only built from attributes. They do not include measures. Every column from the data source is treated as an attribute. This means that any numerical column in the source record, such as price or salary, is treated as an attribute and not a measure. This means when you query a dimension calculation view, a complete list of every single individual value in the source is produced in the output. Even the numerical values such as quantities are listed individually and not aggregated. If you want to sum values then you need a cube calculation view where it is possible to define measures.

If you would like to produce only a distinct list of attribute values, you can specify aggregation on any column. Then each unique value appears only once in the result.

A dimension calculation view does not need to be based only on a single table. You can combine master data tables in a dimension. For example, you could join the customer table to the customer contacts table to generate a comprehensive view of customer information.

Although dimension calculation views can be directly consumed by most reporting tools, it is more likely that your dimension calculation views will be consumed in cube calculation views.

Sharing Dimension Calculation Views
Dimension calculation views are reusable objects and can be shared between several cube calculation views.

One Product DIMENSION Calculation View can be used in several CUBE Calculation Views. For details, see the following text.
For example, the product dimension can be used in a purchase order cube calculation view and also in a sales order cube calculation view. Both cube calculation views require information about products. The dimension calculation view provides that shared information.

...

Creating Cube Calculation Views
Objective

After completing this lesson, you will be able to create a cube calculation view using the graphical calculation view editor.
Cube Calculation Views
When you would like to create a calculation view that includes measures, you use a calculation view of the following type: cube.

An example of a cube calculation view for orders that accesses columns from different database tables. Order ID, Customer ID, and Quantity Sold are accessed from the Sales Table. Quantity Returned is accessed from the Returns Table.
By default, all the measures in this type of calculation view will always be aggregated by the attributes requested by the query. Consequently, even though the calculation view may be able to provide many attributes, the measures are always automatically aggregated only by the attributes that were requested by the query.

For example, your cube calculation view provides the measure: revenue, and the attributes: country and city. The query requests only country, and so revenue is summed by country and not by city. If the next query requests the measure: revenue, and the attributes: country and city, then the revenue would be summed by city and also country. This means that you will have two levels of aggregation.

This type of calculation view is optimized for ad-hoc analysis, where unpredictable slice-and-dice is required over the measures by any combination of attributes within the model.

Create a Simple CUBE Calculation View
In this demonstration, you will learn how to create a simple CUBE calculation view.

Demo
Start Demo
Cube with Star Join Calculation View
An extension to the cube calculation view is the cube with star join.

An example of a cube with star join Calculation View for sales. In addition to sales and returns data from tables, customer name and contact frequency are accessed from the customer dimension Calculation View.
In addition to the capabilities of the cube type of calculation view, a cube with star join calculation view allows you to connect dimension calculation views so that you significantly expand the capabilities for analysis by providing additional attributes. For example, if you create a sales cube calculation view, which provides only limited attributes such as a product number, you could then join the product dimension calculation view to provide many more product-related attributes such as product description, supplier, color, and price. You could then aggregate the sales revenues by product color, supplier, and so on.

Cube with star join calculation views are the most advanced type of calculation view and are popular in analytical scenarios where ad-hoc analysis is required. Cube with star join calculation views are processing by a dedicated SAP HANA Cloud OLAP engine to provide high performance.

The type of joins between the fact and dimension tables within the star schema can be defined in the Star Join node. The available joins are as follows:

Referential Join

Inner Join

Left Outer Join

Right Outer Join

Full Outer Join, with some specific restrictions (see previous information)

Text Join

Screen capture of a definition of a Calculation View containing first a Join node, then a Star Join node, then a Semantics node on top. The lower level Join acts as fact table. The Star Join node above includes several dimension Views.
Shared Columns from DIMENSION Calculation Views
In a cube with star join calculation view, the Columns tab of the Semantics node separates columns into two categories:

Private
Private columns are columns that are defined inside the calculation view itself. These can be measures or attributes. You have full control over these columns.

Shared
Shared columns are columns that are defined "externally", in one or more dimension calculation views that are referenced by your cube with star join calculation view. On these columns, you have logically less control, because they are potentially "shared" with another cube with a star join calculation view. Still, you can hide some of these columns to only keep the ones that you need.

Regarding the shared columns, their Name and Label properties cannot be changed, compared with a private column, but you can define an Alias Name and an Alias Label. Moreover, providing Alias Names is mandatory if column names from the underlying dimension calculation views conflict with each other or conflict with the private column names.

Create a CUBE with Star Join Calculation View
In this demonstration, you will learn how to create a CUBE with a star join calculation view.

Demo


...

Creating Time-Based Dimension Calculation Views
Objective

After completing this lesson, you will be able to create a time-based dimension calculation view using the graphical calculation view editor.
Time-Based Dimension Calculation Views
There are two types of dimension calculation view: Standard and Time.

You use time-based dimension calculation views to automatically generate various date-related attributes from a base date. For example, from the base date dd-mm-yy, the time-based dimension calculation view automatically provides the following:

The number of the day in the week. For example, Wednesday = day 3
The week number in the year. For example, 19 Feb = week 7
The quarter. For example, 12th December = Q4
The half-year. For example, 12th December = second half
The financial period. For example, 27th April 2022 = fiscal period 01/22
This means that you do not have to provide all possible time attributes in the source record or create complicated SQL functions to generate the additional date-related attributes. All that is needed is the base date in the source record. From that we can derive all possible time attributes automatically.

The main use case for time-based dimension calculation views is to allow a business user to aggregate measures of a cube by any date-relates attribute. The modeler can even define a time hierarchy in the dimension calculation view so that a drill-down through time is possible. For example, drill from year to half-year, then to quarter, then to month, then to week, and finally to day. You can even go further and drill right down to hour, minute, and seconds.

Screen capture of creating a new Calculation View for time attributes. First, define its type TIME. Use the underlying table HA300::M_TIME_DIMENSION. Then, choose Create. A View with columns such as CALQUARTER, CALMONTH, CALWEEK is generated.
When you create a time-based dimension calculation view, a table is also generated that is automatically filled with records that represent the data attributes for a range of dates that you specify. For example, you can choose to generate records between 2020 - 2024. You can regenerate the data at any time to keep the table up-to-date. The generated time table is used as the data source to the time-based dimension calculation view. You then consume the time-based dimension calculation view in your cube calculation view.

Different Calendar Types in Time Calculation View


...

Choosing a Data Source for a Calculation View
Objective

After completing this lesson, you will be able to understand which data sources are supported by calculation views.
Supported Data Source Types in Graphical Calculation Views
All calculation views have a data source assigned. This provides the input data that is processed by the calculation view.

The following is a list of the data source types that are supported in SAP HANA Cloud calculation views:

Row Table
Column Table
Virtual Tables
Calculation Views
SQL Views
Table Functions
Row or Column Tables
SAP HANA Cloud supports traditional row tables. It also supports SAP HANA Cloud optimized column tables. It makes no difference to a modeler whether the table is row or column and all modeling functions are available with both types. Column tables are optimized to provide you with a very fast read-performance, which makes it the most popular type of table use with calculation views.

Virtual Tables
A virtual table is a table that is part of the SAP HANA Cloud database and is mapped to a remote table outside of SAP HANA Cloud.

By including a virtual table in your calculation view, you reach external data sources from any location in your landscape. The data sources can be database tables, flat files, spreadsheets and more. You should always keep performance in mind when using virtual tables as their use can significantly impact response time.

Calculation Views
Calculation views are a popular data source for other calculation views. Developing data models using layers is recommended break up complex models. In addition, a calculation view can be used by other calculation views, so it makes sense to capture the data processing logic once and reuse many times to avoid redundancy.

SQL Views
SQL views have been around for a very long time and are created using the SQL language. These views might be present in your SAP HANA Cloud database as they are still popular with developers who may not have the skills to develop calculation views. They are a much simpler type of view compared to a calculation view but still provide the ability to combine data sources and add calculated columns.

Table Functions
Table functions can be used to define complex data sources using SQL Script. These data sources can then be consumed by a calculation view.

As a general rule, you should always try to use the standard functionality of the calculation view using the graphical editors. However, sometimes you might need to revert to SQL code to produce the desired outcome.

...

Checking the Output of a Calculation View
Objective

After completing this lesson, you will be able to check the output of a calculation view to ensure correct results are generated.
Checking the Output of a Calculation View
When you are building a calculation view, SAP Business Application Studio allows you to use a feature called Data Preview to check the results.

There are two ways to display a data preview:

Right-click the top node of an open calculation view and choose Data Preview.
Right-click any deployed calculation view in the Explorer pane and choose Data Preview.
This Is particularly useful to preview data from a calculation view that is not currently open.

The embedded data preview in SAP Business Application Studio mentioned above is an equivalent to the data preview included in another SAP HANA Cloud tool: Database Explorer. This tool can be launched from the Explorer window, in the SAP HANA Projects pane. Choose the root element (this is the database module, for example HC300/db), and choose Open HDI Container.

In the data preview, you can view the SQL code that generated the results. This is a simple SQL query that selects all columns of the calculation view, with no filters. The statement includes all aggregate functions defined In the top view node, if any. You can edit the query to remove columns or add filters, and so on, in order to test the calculation view against different query conditions.

Watch this video to learn about the Standard Preview or Custom SQL Query.

Standard Data Preview Features
Even though the Database Explorer is not a reporting tool, it still offers analysis functionality that can be useful during modeling or troubleshooting. It is comprised of the following tabs, each offering specific capabilities:

Database Explorer Tabs
Tab	Displays	Use Case
Raw Data	All data	Basic display of contents
Hierarchies	Data for a Selected SQL Hierarchy	Preview of a modeled SQL hierarchy
Analysis	Selected attributes and measures in tables or graphs	Profiling and analysis
Choosing the User who Executes the Data Preview
Up to SAP HANA Cloud QRC 3/2021, the data preview triggered from within the Calculation View editor (by right-clicking the up-most node, below the Semantics node) or right-clicking a design-time object in the DB module structure, was executed with a technical user ..._RT who has, by default, extensive privileges on the container's objects plus all the privileges granted to the application user in case an external schema or container is accessed.

Since QRC 4/2021, from the Calculation View editor, it is possible to choose whether you want to trigger the data preview with this ..._RT user (Data Preview) or another user (Data Preview With Other Database User). This allows you to apply session contexts (client values, analytic privileges, and so on).

Screen capture of the context menu on an Aggregation node with entry Data Preview with Other Database User. See text before and after the image for details.
You must choose the other database user among the users referenced in connections defined in the Database Explorer. In particular, to query a calculation view with a standard database user, this user must be assigned to an SAP HANA Database (it is not possible to add an HDI container with another user than the ..._RT user).

You can find more information about users and security in the section, Implementing Security in SAP HANA Modeling, of this course.

Note

To avoid Data Preview delay, the list of Database Explorer connection is not filtered. Make sure to choose a relevant connection, that is, one made with a user who has access to the HDI Container schema.
Manual vs. Automatic Data Preview Query Execution
Up to SAP HANA Cloud QRC 4/2021, upon data preview, the default query is automatically executed.

Starting with SAP HANA Cloud QRC 1/2022, a general option in SAP Business Application Studio allows you to decide whether the query is executed automatically, or needs to be triggered manually. This new option allows you to avoid the automatic execution of an expensive query during data preview, especially when you want to adapt the query before executing it.

Hint

To find the setting easily, in the preferences of SAP Business Application Studio, search for Manual Refresh. Note that you can have different settings in each development space, and you can also specify the option at the User or Workspace level.
Data Preview: SQL Hierarchies
SAP HANA Cloud QRC 1/2022 brings in a new capability for Data Preview: SQL Hierarchies modeled in a Calculation View can be visualized within SAP Business Application Studio Data Preview.

Screen capture of the preview of a geographical hierarchy structure and its data. The root node (all) is expanded to regions (Europe, North America), to countries (DE, ES, FR, GB) and to provinces). A button SQL at the top right allows you to display the SQL hierarchy query statement.
It allows you to easily check the modeled hierarchies without using an external and / or third-party tool. You can also display and copy the SQL statement used to navigate the hierarchy.

...

Working with Common Features of Calculation Views
Objective

After completing this lesson, you will be able to describe features that are common to all types of calculation view.
Defining Column Semantics
Every calculation view has a Semantics node. You do not add this, it is already present and will always be the top node (regardless of the type of calculation view). In this node, you assign semantics to each column in order to define its behavior and meaning. This is important information used by consuming clients so that they are able to display and process the columns appropriately.

Screen capture of details of the Semantics node of a calculation view. As Semantics, you can specify that a field is Quantity with Unit Of Measure or Amount with Currency Code or Date. For the reason to do so, see the following text.
One of the most important and mandatory settings for each column is its column type. You can choose between attribute or measure. This defines the basic role of the column.

In the semantic node, you can also optionally assign a semantic type to each column. A semantic type describes the specific meaning of each column and this can be helpful to any client that consumes the calculation view by enabling it to then represent the columns in the appropriate format. For example, if you define a column as a date semantic type, the front-end application can format the value with separators rather that a simple string. The key point is that it is the responsibility of the front-end application or consuming client to make use of this additional information provided by the semantic type.

Assigning a description column to another column - for example, assigning the product id column to a product description column so that a user sees a value which is more meaningful.

Hiding a column - This can be used if a column is only used in a calculation, or is an internal value that should not be shown, for example, hiding the unhelpful product id when we have assigned a description column that should be shown in its place.

Assigning a variable - This enables a user to select a filter value at runtime for the attribute.

Apart from the semantic type, there are other important settings that can be defined for each column such as the following:

One of the most frequently maintained values in the Semantics node is the name and label of the column. It is possible to define an alternative name and label to any column so that it will make more sense to a user than what was originally proposed from the data source.
For example, who wants to see the word MATNR in a business report column heading when we really should be seeing the words Material Number?
Data Source Aliases
In some cases, you need to use the same data source more than once in a calculation view. Although it is possible to include the same data source multiple times in the same calculation view, each instance needs a unique name to identify it.

When adding multiple instances of thee same table to a view, an alias will be proposed. It is possible to modify the proposed alias name, such as HA300::SNWD_BP_1, in the data source properties of the Mapping tab.
In order to support this scenario, you define an alias for any additional instance of the same data source. The alias is found under Properties when you click on the header of the data source.

Note

SAP Business Application Studio automatically suggests an alias by adding an incremental number to the end of the original data source name. We recommend choosing your own alias name to provide something more meaningful, by overwriting the proposal.
Hiding Columns
Sometimes columns are used within calculations but must not be exposed to the business user through a front-end tool. You can choose to hide columns that should not be exposed.

Screen capture of the columns settings for the Semantics node. To hide a column, select the Hidden check-box. The column will not be exposed to reporting tools, but can be used within the calculation view itself, for example in calculated columns.
In the example shown in the figure, Hidden Columns, we see that FIRST_NAME and LAST_NAME are not needed as they are hidden. The scenario that we have created here is a new calculated column FULL_NAME, which combines FIRST_NAME and LAST_NAME so that these are not required in the result.

Label Columns and Hidden Attributes
You can also define a label column to provide a more meaningful description to the end user in the report compared to displaying the technical name - for example, Employee Name vs. Employee ID.

Screen capture of the columns details for the Semantics node. You can define a label column next to a base attribute. When reporting on an information model with a tool that supports this feature, the label column is displayed as Text and the base column is displayed as Key.
To achieve this, you simply associate the column that contains the technical name with the column that contains the description. The front-end tool usually provides a feature that enables the end user to toggle between the two.

Watch this video to learn how to Hide Columns Set Label Columns.

Sorting the Data Set
SAP HANA Cloud has the possibility to sort the result set (output) of any calculation view. This enables you to define a sort order that will apply when none is specified by the client query that is executed on top of the calculation view, thus guaranteeing a stable result order.

It can also be useful when previewing the data for the purpose of testing your calculation views.


Note

It is technically possible to include a hidden column in the list of columns used to sort a result set. However, this generally does not make sense as the business user will not see how the data set is sorted.
Caution

When the client query defines itself, a sort order on different columns, or only a part of the sort columns used in the calculation view design to order the result set, you cannot be sure that the original order defined in the calculation view on other columns is applied. For example, if the calculation view sorts the result set by SO_ID, then PRODUCT_ID and a front-end tool executes a query ordered by PRODUCT_ID, you will not necessarily have your result set actually sorted by PRODUCT_ID then SO_ID. To get this result, the front-end query needs to specify the two columns in the ORDER BY clause.
Null Values
Columns, both attributes and measures can contain undefined values or null values. You can handle such cases by defining default values that replaces the null values in reporting tools.

For example, you can replace the column values that would usually appear with the null value representation of '?' with a default value 'Null', or 'Empty' or with any other user defined value that you prefer.

Select the Semantics node
Choose the Columns tab
Select a measure or attribute
Select the 'Null Handling' checkbox
Optionally, in the Default Value text field, provide a default value
Note

If you have enabled null handling for columns and if you have not provided any default value, then the tool considers the integer 0 as the default value for columns. However, for columns of data type NVARCHAR, if you have not defined a default value after enabling null handling, the tool displays an empty string, (which means blank), as the default value.
General Properties of Calculation Views
For each calculation view, you can define a number of properties in the View Properties tab of the Semantics node. Depending on the type of calculation view, the list of available properties may vary.

Calculation view properties are organized with four tabs of the semantics node that have the labels General, Advanced, Static Cache, and Snapshots.

The two following tables list the General and Advanced properties of views and give a short description. A number of these properties are described in more detail in the following lessons.

Properties of Views — General
Property	Description
Data Category	For calculation views, this determines whether the view supports multidimensional reporting.
Type	Standard or Time
Run With	Defines how to apply security when executing a script-based calculation view.
Default Client	Defines how to filter data by SAP CLIENT (aka MANDT).
Apply Privileges	Specifies whether analytic privileges must apply when executing a view (SAP Business Application Studio for SAP HANA modeling supports SQL analytic privileges only).
Default Member	Defines the default member to be used for all the hierarchies of this calculation view.
Deprecate	Identifies views that are not recommended for reuse, though still supported in SAP HANA Modeler.
Enable Hierarchies for SQL access	In a calculation view of type CUBE with star join, determines whether the hierarchies defined in shared dimension views can be queried via SQL.
End-User View	Specify whether to offer this calculation view as a source to reporting tools.
Properties of Views — Advanced
Property	Description
Propagate instantiation to SQL Views	If the calculation view is referenced by an SQL view or a Core Data Services (CDS) view, it determines whether the calculation view must be instantiated. For example, it prunes columns that are not selected by the previous queries) or executed exactly as it is defined.
Analytic View Compatibility Mode	If this setting is activated, the join engine ignores joins with cardinality n..m defined in the star join node when no column at all is queried from one of the two joined tables.
Ignore Multiple Outputs For Filter	Optimization setting to push down filters even if a node is used in more than one other node.
Evaluate Session Variables Early	Optimize union pruning by considering session variable values during pruning decision
Pruning Configuration Table	Identifies which table contains the settings to prune Union nodes.
Execute in	Determines whether the model must be executed by the SQL engine or column engine.
Execution Hints	This property is used to specify how the SAP HANA engines must handle the calculation view at runtime.

...

Top View Node
Objective

After completing this lesson, you will be able to describe the function of the top view node.
The Top View Node
Top View Node
When you create a new calculation view, there are always two nodes that are automatically provided.

The very top node is the Semantic node. This node is used to define enrichments to the final results set, such as adding currency information to measures, or apply masking rules to cover up sensitive parts of a data. This is a mandatory node and no additional nodes can be added on top.

Below the semantic node, there is another very important node called the top view node. This node generates the calculated data set before semantics are applied.

How the data category of a calculation view influences the valid top view nodes and result set. The default for a dimension view is Projection. The result is a complete list of attributes. If you switch to Aggregation, the result is a distinct list of attributes. The default for a Cube view is Aggregation. The result aggregates measures over selected attributes. If you switch to Projection, the measures are not aggregated. If you switch to Star join node, you access more attributes from multiple dimensions to aggregate measures.
The type of top-view node that is automatically provided depends on the type of calculation view you are creating. SAP provide a default top-view node type for each of the calculation view types, but it is possible to swap this default node to a different type. You would do this to modify the behavior of your calculation view so that the correct final result is produced before the additional semantics are applied.

Used in conjunction with the switch of calculation view data category, which you find under Properties, it means that you can avoid having to create a brand new calculation view if you just want to change the final step in data preparation. When you switch the node type, the graphical calculation view editor attempts to preserve as much of the existing calculation view definition as possible.

You cannot remove the top-view node or add any additional nodes on top of it.

Note

A very simple calculation view might not require any additional nodes below the top-view node.

The rationale for having the Semantics on top of the top-view node is as follows:

Let you manage the top-view node as any other node of the same type (aggregation, projection, or star join which is exclusively used as a top view node and has a few additional capabilities)
Display separately the view-global information, such as view properties (including caching and snapshots queries), list of columns (including shared dimensions) with all their properties, column lineage, and so on.
Define additional settings such as the semantics of measures (for currency translation purposes, for example), hierarchies, variables, and input parameters.

...

Knowledge quiz
It's time to put what you've learned to the test, get 7 right to pass this unit.

1.
Why do you create a time-based dimension calculation view?
Choose the correct answer.

To define a calculation view that is valid for a specific period of time

To automatically generate time-related attributes from a base date

To generate historical views of master data
2.
What is the role of a dimension calculation view?
Choose the correct answer.

To aggregate measures by one or more attributes

To combine dimensions with a cube to form a star schema

To generate a view of master data from one or more tables
3.
Which is the default top-view node for a dimension calculation view?
Choose the correct answer.

Star Join

Projection

Aggregation
4.
Which are benefits of calculation views?
There are two correct answers.

They calculate live data on-the-fly

They can be defined using any database language

They adapt automatically to the requesting query
5.
What is the role of the cube calculation view?
Choose the correct answer.

To aggregate measures without the need for dimensions

To project master data into a harmonized view

To develop a star schema for ad-hoc analysis
6.
What is the name of the tool that is launched with Data Preview of a calculation view?
Choose the correct answer.

SAP Business Application Studio

SAP HANA Cloud Cockpit

SAP HANA Database Explorer
7.
Why do you hide columns in a calculation view?
Choose the correct answer.

When you want to hide a column that is used in a calculation but is not required to display in a report.

When you do not want to expose a sensitive column to a consuming calculation view.

To ensure they can only be displayed along with other attributes and not used for drill-down navigation of filtering.

When you want to hide some of a calculation view data based on attribute values.
8.
Which of the following are supported data source types for calculation view consumption?
There are four correct answers.

Calculation views

Flat files

Virtual tables

Column tables

Row tables

......
